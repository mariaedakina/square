#ifndef SOLVER_H
#define SOLVER_H

#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <assert.h>

/**
 * @file solver.h
 * @brief Заголовочный файл для решения квадратных уравнений.
 *
 * Этот файл содержит структуры и функции, необходимые для решения
 * заданных уравнений и работы с их корнями.
 */

const double EPS = 0.0000001; ///< Точность сравнения чисел с плавающей запятой.

/**
 * @struct Koefs
 * @brief Структура для хранения коэффициентов квадратного уравнения.
 *
 * Эта структура содержит три коэффициента: a, b и c.
 */
struct Koefs {
    double koef_a; ///< Коэффициент a (при переменной 2 степени).
    double koef_b; ///< Коэффициент b (при переменной 1 степени).
    double koef_c; ///< Коэффициент c (свободный член).
};

/**
 * @struct Roots
 * @brief Структура для хранения корней квадратного уравнения.
 *
 * Эта структура содержит количество корней и сами корни уравнения.
 */
struct Roots {
    int nRoots;         ///< Количество корней (может быть 0, 1, 2 или бесконечное колиество корней).
    double first_root;  ///< Первый корень уравнения (при наличии).
    double second_root; ///< Второй корень уравнения (при наличии).
};

/**
 * @struct Test_Data
 * @brief Структура для хранения данных теста.
 *
 * Эта структура содержит данные для тестирования решения квадратного уравнения:
 * номер теста, коэффициенты уравнения, ожидаемые корни и количество корней.
 */
struct Test_Data {
    int nTest;           ///< Номер теста.
    struct Koefs koefs;  ///< Коэффициенты квадратного уравнения.
    struct Roots roots;  ///< Ожидаемые корни уравнения.
    double right_x1;     ///< Ожидаемый первый корень (при наличии).
    double right_x2;     ///< Ожидаемый второй корень (при наличии).
    double right_nRoots; ///< Ожидаемое количество корней.
};

/**
 * @enum roooots
 * @brief Перечисление возможных значений количества корней.
 */
enum roooots {
    INFINITY_ROOTS = -1,///< бесконечное количество корней.
    ONE_ROOT = 1,       ///< один корень.
    TWO_ROOTS = 2,      ///< два корня.
    ZERO_ROOT = 0       ///< нет корней.
};

/**
 * @brief Решение квадратного уравнения.
 *
 * Функция принимает указатель на структуру Test_Data и вычисляет
 * корни квадратного уравнения, основываясь на его коэффициентах.
 *
 * @param r Указатель на структуру Test_Data с коэффициентами уравнения.
 */
void SolveSquare(struct Test_Data* r);

#endif // SOLVER_H




